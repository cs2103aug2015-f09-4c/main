diff a/Parser/Parser.cpp b/Parser/Parser.cpp	(rejected hunks)
@@ -1,58 +0,24 @@
-#include "Parser.h"
+#include "CompleteCommandParser.h"
 
-Parser::Parser(void) {
-	_commandTokens.setPrimaryCommand(PrimaryCommandType::Invalid);
+CompleteCommandParser::CompleteCommandParser(void) {
+	// nothing here
 }
 
-CommandTokens Parser::parse(std::string userInput) {
-	PrimaryCommandType primaryCommand = parsePrimaryCommand(userInput);
+CommandTokens CompleteCommandParser::parse(std::string userInput) {
+	_commandTokens.resetMemberVariables();
+	_commandTokens.setPrimaryCommand(PrimaryCommandType::Complete);
 
-	switch (primaryCommand) {
-	case Add:
-		return _addCommandParser.parse(userInput);
-	case Delete:
-		return _deleteCommandParser.parse(userInput);
-	case Display:
-		return _displayCommandParser.parse(userInput);
-	case Edit:
-		return _editCommandParser.parse(userInput);
-	case Invalid:
-		return _commandTokens;
-	default:
-		return _commandTokens;
-	}
+	tokeniseCompleteCommand(userInput);
 }
 
-PrimaryCommandType Parser::parsePrimaryCommand(std::string userInput) {
-	PrimaryCommandType commandType = Invalid;
-	if (isAddCommand(userInput)) {
-		commandType = Add;
-	} else if (isDeleteCommand(userInput)) {
-		commandType = Delete;
-	} else if (isEditCommand(userInput)) {
-		commandType = Edit;
-	} else if (isDisplayCommand(userInput)) {
-		commandType = Display;
-	}
-	return commandType;
-}
-
-bool Parser::isAddCommand(std::string& userInput) {
-	return std::regex_match(userInput, std::regex("add .{1,}",
-		std::regex_constants::ECMAScript | std::regex_constants::icase));
-}
-
-bool Parser::isDeleteCommand(std::string& userInput) {
-	return std::regex_match(userInput, std::regex("delete .{1,}",
-		std::regex_constants::ECMAScript | std::regex_constants::icase ));
-}
+void CompleteCommandParser::tokeniseCompleteCommand(std::string userInput) {
+	_commandTokens.setSecondaryCommand(SecondaryCommandType::Index);
 
-bool Parser::isDisplayCommand(std::string& userInput) {
-	return std::regex_match(userInput, std::regex("display .{1,}",
+	std::smatch matchResults;
+	std::regex_match(userInput, matchResults,
+		std::regex("complete ([0-9]{1,})",
 		std::regex_constants::ECMAScript | std::regex_constants::icase ));
-}
 
-bool Parser::isEditCommand(std::string& userInput) {
-	return std::regex_match(userInput, std::regex("edit .{1,}",
-		std::regex_constants::ECMAScript | std::regex_constants::icase ));
+	int index = std::stoi(matchResults[1]);
+	_commandTokens.setIndex(index);
 }
\ No newline at end of file
